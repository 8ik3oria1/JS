//Функции, стрелочные функции

"use strict";

let num = 20; //глобальная переменная

function showFirstMessage(text){ //()-здесь передаем аргументы функции, данные которые функция будет использовать внутри себя
    console.log(text);
    let num = 10; //локальная переменная
}

//в случае если переменная объявлена внутри функции - она остается внутри функции!!

showFirstMessage("Hello World!");
console.log(num);

//замыкание функции

let num = 20; //глобальная переменная

function showFirstMessage(text){ //()-здесь передаем аргументы функции, данные которые функция будет использовать внутри себя
    console.log(text);
    let num = 10; //локальная переменная
    console.log(num); //здесь выведется 10 -- обращение идет к локальной переменной
}

showFirstMessage("Hello World!");
console.log(num); //выведется 20 -- обращение идет к глобальной переменной

//калькулятор 

function calc(a,b) {
    return (a+b); //вернуть значение либо окончание функции
}

console.log(calc(4, 3));
console.log(calc(5, 6));
console.log(calc(10, 6));

function ret(){
    let num = 50;
    return num; //вытягивает переменную наружу! то есть данный результат можно куда-то записать
}

const anotherNum = ret(); //например сюда записать!!
console.log(anotherNum);

//классификация функций

//function declaration -- она идет в потоке кода и записывается в классическом виде (см.выше). 
//Функция существует до того как запустится код

//function expression -- создается только тогда когда доходит поток кода, можно вызвать только после объявления

const logger = function() {
    console.log("Hello!");
};

logger();

//стрелочная функция 

const calc = (a, b) => a+b; //создаем переменную в которую помещаем функцию --- так можно писать если 
//функция в одну строку
// (a,b) - аргументы
//(a+b) - говорит выполняй определнный код

const calc = (a, b) => {return a+b}; //стрелочная функция не имеет контекста вызова

const calc = (a, b) => {
    console.log('1');
    return a+b;
};