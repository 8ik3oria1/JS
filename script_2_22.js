//Циклы

"use strict";

//1-й вариант цикла - проверяет условие перед каждой итерацией

let num = 50;

while (num <= 55) {
    console.log(num);
    num++;
}

// Чтобы организовать бесконечный цикл, используют конструкцию while (true). 
// При этом он, как и любой другой цикл, может быть прерван директивой break.

// Любое выражение или переменная может быть условием цикла, а не только сравнение: 
//условие while вычисляется и преобразуется в логическое значение.
// Например, while (i) – более краткий вариант while (i != 0):

let i = 3;
while (i) { // когда i будет равно 0, условие станет ложным, и цикл остановится
  console.log( i );
  i--; //уменьшается на 1
}

//2-й вариант

//сначала цикл что-то делает, а затем проверяет условие и если необходимо выйти из цикла

let num = 50;

do {
    console.log(num);
    num++;
}
while (num < 55);

//3-й вариант цикла
//let i = 1; - когда цикл начнется в нем создастся i (переменная) 
// i < 8 - условие при котором цикл закончит свою работу
// i++ - шаг цикла (в данном случае +1)

for (let i = 1; i < 8; i++) {
    console.log(i);
}

let num = 50;

for (let i = 1; i < 8; i++) {
    console.log(num);
    num++;
}

// Для примера, мы можем пропустить начало если нам ничего не нужно делать перед стартом цикла.
// Вот так:

let i = 0; // мы уже имеем объявленную i с присвоенным значением

for (; i < 3; i++) { // нет необходимости в "начале"
  console.log( i ); // 0, 1, 2
}

// Можно убрать и шаг:

let i = 0;

for (; i < 3;) {
  alert( i++ );
}
// Это сделает цикл аналогичным while (i < 3).

//А можно и вообще убрать всё, получив бесконечный цикл:

for (;;) {
  // будет выполняться вечно
}
//При этом сами точки с запятой ; обязательно должны присутствовать, иначе будет ошибка синтаксиса.



//закончить цикл досрочно

//break - просто завершить цикл при выполнении условия
for (let i = 1; i < 10; i++) {
    if (i === 6) {
        break;
    }

    console.log(i);
}

//continue - пропускает указанный шаг и переходит к следующей итерации
for (let i = 1; i < 8; i++) {
    if (i === 6) {
        continue;
    }
    console.log(i);
}

// Нельзя использовать break/continue справа от оператора „?“
// Обратите внимание, что эти синтаксические конструкции не являются выражениями и не могут быть использованы с тернарным оператором ?. В частности, использование таких директив, как break/continue, вызовет ошибку.

// Например, если мы возьмём этот код:

if (i > 5) {
  alert(i);
} else {
  continue;
}
// …и перепишем его, используя вопросительный знак:

(i > 5) ? alert(i) : continue; // continue здесь приведёт к ошибке
// …то будет синтаксическая ошибка.

// Это ещё один повод не использовать оператор вопросительного знака ? вместо if.
// ? тернарный оператор 
// Условный (тернарный) оператор - единственный оператор в JavaScript, принимающий три операнда: условие, 
// за которым следует знак вопроса (?), затем выражение, которое выполняется, если условие истинно, сопровождается двоеточием (:), и, наконец, выражение, которое выполняется, если условие ложно. Он часто используется в качестве укороченного варианта условного оператора if.

// Синтаксис
// условие ? выражение1 : выражение2 

//https://learn.javascript.ru/while-for
